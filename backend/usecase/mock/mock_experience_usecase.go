// Code generated by MockGen. DO NOT EDIT.
// Source: experience_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	usecase "stackies/backend/usecase"

	gomock "github.com/golang/mock/gomock"
)

// MockExperienceUsecase is a mock of ExperienceUsecase interface.
type MockExperienceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockExperienceUsecaseMockRecorder
}

// MockExperienceUsecaseMockRecorder is the mock recorder for MockExperienceUsecase.
type MockExperienceUsecaseMockRecorder struct {
	mock *MockExperienceUsecase
}

// NewMockExperienceUsecase creates a new mock instance.
func NewMockExperienceUsecase(ctrl *gomock.Controller) *MockExperienceUsecase {
	mock := &MockExperienceUsecase{ctrl: ctrl}
	mock.recorder = &MockExperienceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExperienceUsecase) EXPECT() *MockExperienceUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExperienceUsecase) Create(title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", title)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExperienceUsecaseMockRecorder) Create(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExperienceUsecase)(nil).Create), title)
}

// GetAll mocks base method.
func (m *MockExperienceUsecase) GetAll() ([]usecase.ExperienceDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]usecase.ExperienceDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockExperienceUsecaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockExperienceUsecase)(nil).GetAll))
}
